#!/bin/bash

# This task needs to left as it is
# This is for external plugins and programs to query the available tasks
function __show_tasks {
        compgen -A function | grep -v "^_"
}

# Helper functions start with _ and are invisible to bash auto completion.
function _get_random_number {
        local min=$1
        local max=$2
        echo $(( ( RANDOM % $max )  + $min ))
}

# Simple logger helper function
function _logger {
        local d=$(date --rfc-3339=ns)
        echo -ne "$d\t$@\n"
}

# This is just an example
function build {
        local rand=$(_get_random_number 1 10)
        local i=0
        echo
        echo "Build $1"
        while [ $i -lt $rand ]; do
                sleep 1
                echo  " Computing $1 ..."
                ((i++))
        done
        echo "Finished $1"
        echo
}

# Watching for changes and then rebuild automatically
# Easy as pie!
function watch {
        local watchdir="./src/"
        _logger "Watcher started"
        inotifywait -m -r -e close_write --format '%w%f' "${watchdir}" | \
        while read events; do
                _logger "Build triggered"
                Task build
                _logger "Build finished"
        done
}

## Deploy to a remove server using rsync is easy as fuck!
function deploy {
        local username="$(cat ./config.json | jq -r .deployment.username)"
        local hostname="$(cat ./config.json | jq -r .deployment.hostname)"
        local upload_dir="$(cat ./config.json | jq -r .deployment.upload_dir)"
        rsync -av --no-o --no-g ./dist/ "$username"@"$hostname":"$upload_dir"
}

## Watch the src dir for changes and then auto-build and auto-deploy
function auto-deploy {
        local watchdir="./src/"
        _logger "Auto-Deploy started"
        inotifywait -m -r -e close_write --format '%w%f' "${watchdir}" | \
        while read events; do
                _logger "Build triggered"
                Task build
                _logger "Build finished"
                _logger "Deployment triggered"
                deploy
                _logger "Deployment finished"
        done
}

# Parallelisation - run multiple tasks in parallel.
function build-all {
        # Run these Tasks in parallel
        build android & build iphone & build ipad & build web &
        # .. and wait until every Task has finished
        wait
}

# Another example, but it's always a good practice to have a help function
function help {
        echo "$0 <task> <args>"
        echo "Tasks:"
        __show_tasks | cat -n
}

# This is a wrapper for what should be executed, when no args are passed to the
# Taskfile
function default {
        __show_tasks
}

${@:-default}

